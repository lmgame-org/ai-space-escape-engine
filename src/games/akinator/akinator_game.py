from src.games.base_game import BaseGame
import random
import json
import os
import re
from src.fschat.conversation_game import Conversation
from typing import Optional, Any

# Paths to the JSON files
LEVEL_DATA_FILES = {
    1: "./assets/level1_appliances.json",
    2: "./assets/level2_instruments.json",
    3: "./assets/level3_animals.json"
}

def load_prompts(prompt_file_path):
    with open(prompt_file_path, 'r') as f:
        return json.load(f)

class AkinatorGame(BaseGame):

    def __init__(
        self,
        level: int,
        difficulty: str,
        user_id: Optional[int] = 0,
        username: Optional[str] = "anonymous",
        conversation: Optional[Conversation] = None,  # Added 'conversation' parameter
        game_secret: Optional[str] = None,  # Added 'game_secret' parameter
        round: int = 0,  # Changed 'current_round' to 'round' to match BaseGame
        game_over: bool = False,  # Added 'game_over' parameter
        game_status: Optional[str] = None,  # Added 'game_status' parameter
        model_name: Optional[str] = None  # Added 'model_name' parameter
    ):
        # Add level
        self.level = level
        max_round_dict = {1: 20, 2: 18, 3: 16}
        max_round = max_round_dict.get(level)

        # Pass parameters to BaseGame
        super().__init__(
            difficulty=difficulty,
            max_rounds=max_round,
            round=round,
            model_name=model_name,
            conversation=conversation,
            user_id=user_id,
            username=username
        )

        # Removed self.current_round; using self.round from BaseGame

        # Set attributes from parameters or defaults
        self.game_over = game_over  # Set game_over
        self.game_status = game_status  # Set game_status

        hint_prompt_file = os.path.join(os.path.dirname(__file__), 'akinator_hint_prompts.json')
        with open(hint_prompt_file, 'r') as f:
            hint_prompts = json.load(f)
        self.hint_prompt = random.choice(list(hint_prompts.values()))

        # self.model_name is set in BaseGame

        # Set allowed answers based on the level
        if level in [1, 2]:
            self.allowed_answers = ["Yes", "Probably Yes", "Don't Know", "Probably No", "No"]
        else:  # Level 3
            self.allowed_answers = ["Yes", "Don't Know", "No"]

        # Load or set game_secret
        if game_secret:
            self.game_secret = game_secret  # Use provided game_secret
        else:
            game_secret_file = os.path.join(os.path.dirname(__file__), 'akinator.json')
            with open(game_secret_file, 'r') as f:
                game_secrets = json.load(f)
            self.game_secret = random.choice(list(game_secrets.keys()))

        # Set system prompt if not provided (self.conversation generated by super class if necessary)
        if not conversation:
            prompt_file = os.path.join(os.path.dirname(__file__), 'akinator_optimized_prompts.json')
            system_prompts = load_prompts(prompt_file)
            self.system_prompt = random.choice(list(system_prompts.values()))

            if not conversation and "o1" not in self.model_name:
                self.conversation.set_system_message(self.system_prompt)

            accepted_answers = ', '.join([f'"{ans}"' for ans in self.allowed_answers])
            self.system_prompt += f"\n\nAccepted Answers: Only these responses are acceptable: {accepted_answers}."
            self.system_prompt += f"\n\nCurrent level is {self.level}, You can only ask {max_round} questions."

        self.first_user_message = (
            "I have a secret object in my mind. Now you can start asking me questions and guess it."
        )

    def is_game_over(self):
        return self.game_over

    def reach_max_round(self):
        if self.round >= self.max_rounds:
            self.game_status = 'PLAYER_LOSE'
            self.game_over = True
            return True
        return False

    def load_random_object(self, level):
        data_file = LEVEL_DATA_FILES.get(level)
        if not data_file or not os.path.exists(data_file):
            raise FileNotFoundError(f"Data file for level {level} not found.")
        with open(data_file, 'r') as f:
            objects_list = json.load(f)
        return random.choice(objects_list)

    def check_akinator_valid_guess(self, s):
        pattern = r"this is a guess"
        return len(re.findall(pattern, s.lower())) != 0

    def guessed_word_correctly(self, s):
        pattern = self.game_secret.lower()
        return len(re.findall(pattern, s.lower())) != 0

    def parse_game_history(self, game_history):
        parsed_history = []

        if game_history == []:
            message = "Secret target word: " + self.game_secret + "\n\n"
            parsed_history.append(f"[assistant]: {message}")
        else:
            for i, exchange in enumerate(game_history):
                role, message = exchange
                # Swap roles: 'user' -> 'assistant' and 'assistant' -> 'user'
                swapped_role = "assistant" if role.lower() == "user" else "user"
                if i == 0:
                    message = "Secret target word: " + self.game_secret + "\n\n" + message
                parsed_history.append(f"[{swapped_role}]: {message}")

        # Join all entries into a single string
        return " ".join(parsed_history)

    # Update methods to use self.round instead of self.current_round
    # Other methods remain unchanged...